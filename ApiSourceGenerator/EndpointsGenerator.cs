namespace ApiSourceGenerator;

[Generator]
public class EndpointsGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var provider = context.SyntaxProvider.CreateSyntaxProvider(
            (node, _) => node is ClassDeclarationSyntax,
            (syntaxContext, _) => (ClassDeclarationSyntax)syntaxContext.Node)
            .Where(x => x is not null);

        var compilation = context.CompilationProvider.Combine(provider.Collect());

        context.RegisterSourceOutput(compilation, Execute);
    }

    private void Execute(
        SourceProductionContext context,
        (Compilation Compilation, ImmutableArray<ClassDeclarationSyntax> Classes) tuple)
    {
        var (compilation, classes) = tuple;

        var prefixCode = """
        // <auto-generated />

        using GeneralApi.Endpoints;

        namespace ApiSourceGenerator;

        public static class EndpointsExtensions
        {
            public static IEndpointRouteBuilder MapAllEndpoints(this IEndpointRouteBuilder app)
            {
        """;

        var codeBuilder = new StringBuilder(prefixCode);

        foreach (var syntax in classes)
        {
            if (compilation.GetSemanticModel(syntax.SyntaxTree).GetDeclaredSymbol(syntax) is not INamedTypeSymbol symbol)
            {
                continue;
            }

            if (!symbol.AllInterfaces.Any(i => i.Name == "IEndpoint"))
            {
                continue;
            }

            codeBuilder.Append($"""
                new {symbol.Name}().MapEndpoints(app);
                """);
        }

        var suffixCode = """
                return app;
            }
        }
        """;

        codeBuilder.AppendLine(suffixCode);

        context.AddSource("EndpointsExtensions.g.cs", codeBuilder.ToString());
    }
}
